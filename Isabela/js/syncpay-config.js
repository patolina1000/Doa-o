/**
 * Configura√ß√µes para integra√ß√£o com SyncPay
 * 
 * Para usar a API real do SyncPay:
 * 1. Cadastre-se em https://syncpay.io/
 * 2. Obtenha sua chave API
 * 3. Substitua 'SUA_API_KEY_AQUI' pela chave real
 * 4. Configure o webhook URL
 * 5. Altere SANDBOX para false para produ√ß√£o
 */

const SYNCPAY_CONFIG = {
    // Configura√ß√µes da API
    CLIENT_ID: '7e242a99-acfd-44ea-bc30-c0f21b8d7826',
    CLIENT_SECRET: 'f5bfa7dd-9c6a-4773-997b-05b54eb7c343',
    API_KEY: 'f5bfa7dd-9c6a-4773-997b-05b54eb7c343', // Usando client secret como API key
    SANDBOX: true, // true para testes iniciais, mude para false quando confirmar que funciona
    
    // URLs da API (testando diferentes endpoints baseados na documenta√ß√£o)
    SANDBOX_URL: 'https://sandbox.syncpay.io',
    PRODUCTION_URL: 'https://api.syncpay.io',
    ALTERNATIVE_SANDBOX: 'https://api-sandbox.syncpay.pro',
    ALTERNATIVE_PRODUCTION: 'https://api.syncpay.pro',
    
    // Configura√ß√µes da campanha
    CAMPAIGN: {
        name: 'Ajude Isabela nessa jornada t√£o dif√≠cil',
        id: '4452341',
        description: 'Campanha para ajudar Isabela no tratamento de sa√∫de',
        beneficiary: 'ISABELA CAMPANHA SAUDE',
        minAmount: 20.00
    },
    
    // Configura√ß√µes de webhook
    WEBHOOK: {
        url: window.location.origin + '/webhook/isabela',
        events: ['payment.approved', 'payment.cancelled', 'payment.refunded']
    },
    
    // Add-ons dispon√≠veis
    ADDONS: [
        {
            id: 'transport',
            name: 'Aux√≠lio transporte',
            value: 10.00,
            icon: 'üöó',
            beneficiaryId: 'transport_fund'
        },
        {
            id: 'meal',
            name: 'Aux√≠lio Refei√ß√£o',
            value: 15.00,
            icon: 'üçΩÔ∏è',
            beneficiaryId: 'meal_fund'
        },
        {
            id: 'basket',
            name: 'Doar Cesta B√°sica',
            value: 85.00,
            icon: 'üõí',
            beneficiaryId: 'basket_fund'
        }
    ],
    
    // Configura√ß√µes PIX
    PIX: {
        expirationDays: 1,
        description: 'Doa√ß√£o para campanha Isabela'
    }
};

/**
 * Fun√ß√£o para validar configura√ß√£o
 */
function validateSyncPayConfig() {
    const errors = [];
    
    if (!SYNCPAY_CONFIG.CLIENT_ID || SYNCPAY_CONFIG.CLIENT_ID === 'SUA_API_KEY_AQUI') {
        errors.push('Client ID do SyncPay n√£o configurado');
    }
    
    if (!SYNCPAY_CONFIG.CLIENT_SECRET || SYNCPAY_CONFIG.CLIENT_SECRET === 'SUA_API_KEY_AQUI') {
        errors.push('Client Secret do SyncPay n√£o configurado');
    }
    
    if (!SYNCPAY_CONFIG.WEBHOOK.url.startsWith('http')) {
        errors.push('URL do webhook inv√°lida');
    }
    
    if (SYNCPAY_CONFIG.CAMPAIGN.minAmount < 1) {
        errors.push('Valor m√≠nimo deve ser maior que R$ 1,00');
    }
    
    return {
        valid: errors.length === 0,
        errors: errors
    };
}

/**
 * Fun√ß√£o para obter configura√ß√£o baseada no ambiente
 */
function getSyncPayConfig() {
    const validation = validateSyncPayConfig();
    
    if (!validation.valid && !SYNCPAY_CONFIG.SANDBOX) {
        console.warn('Configura√ß√£o SyncPay inv√°lida:', validation.errors);
    }
    
    return {
        ...SYNCPAY_CONFIG,
        baseUrl: SYNCPAY_CONFIG.SANDBOX ? SYNCPAY_CONFIG.SANDBOX_URL : SYNCPAY_CONFIG.PRODUCTION_URL,
        validation: validation
    };
}

// Exportar configura√ß√µes
window.SYNCPAY_CONFIG = SYNCPAY_CONFIG;
window.getSyncPayConfig = getSyncPayConfig;
window.validateSyncPayConfig = validateSyncPayConfig;
